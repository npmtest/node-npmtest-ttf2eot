{"/home/travis/build/npmtest/node-npmtest-ttf2eot/test.js":"/* istanbul instrument in package npmtest_ttf2eot */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ttf2eot/lib.npmtest_ttf2eot.js":"/* istanbul instrument in package npmtest_ttf2eot */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ttf2eot = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ttf2eot = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ttf2eot/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ttf2eot && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ttf2eot */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ttf2eot\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ttf2eot.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ttf2eot.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ttf2eot.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ttf2eot.__dirname + '/lib.npmtest_ttf2eot.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ttf2eot/node_modules/ttf2eot/index.js":"/*\n    Author: Viktor Semykin <thesame.ml@gmail.com>\n\n    Written for fontello.com project.\n*/\n\n'use strict';\n\nvar ByteBuffer = require('microbuffer');\n\n/**\n * Offsets in EOT file structure. Refer to EOTPrefix in OpenTypeUtilities.cpp\n */\nvar EOT_OFFSET = {\n  LENGTH:         0,\n  FONT_LENGTH:    4,\n  VERSION:        8,\n  CHARSET:        26,\n  MAGIC:          34,\n  FONT_PANOSE:    16,\n  ITALIC:         27,\n  WEIGHT:         28,\n  UNICODE_RANGE:  36,\n  CODEPAGE_RANGE: 52,\n  CHECKSUM_ADJUSTMENT: 60\n};\n\n/**\n * Offsets in different SFNT (TTF) structures. See OpenTypeUtilities.cpp\n */\nvar SFNT_OFFSET = {\n    // sfntHeader:\n  NUMTABLES:      4,\n\n    // TableDirectoryEntry\n  TABLE_TAG:      0,\n  TABLE_OFFSET:   8,\n  TABLE_LENGTH:   12,\n\n    // OS2Table\n  OS2_WEIGHT:         4,\n  OS2_FONT_PANOSE:    32,\n  OS2_UNICODE_RANGE:  42,\n  OS2_FS_SELECTION:   62,\n  OS2_CODEPAGE_RANGE: 78,\n\n    // headTable\n  HEAD_CHECKSUM_ADJUSTMENT:   8,\n\n    // nameTable\n  NAMETABLE_FORMAT:   0,\n  NAMETABLE_COUNT:    2,\n  NAMETABLE_STRING_OFFSET:    4,\n\n    // nameRecord\n  NAME_PLATFORM_ID:   0,\n  NAME_ENCODING_ID:   2,\n  NAME_LANGUAGE_ID:   4,\n  NAME_NAME_ID:       6,\n  NAME_LENGTH:        8,\n  NAME_OFFSET:        10\n};\n\n/**\n * Sizes of structures\n */\nvar SIZEOF = {\n  SFNT_TABLE_ENTRY:   16,\n  SFNT_HEADER:        12,\n  SFNT_NAMETABLE:          6,\n  SFNT_NAMETABLE_ENTRY:    12,\n  EOT_PREFIX: 82\n};\n\n/**\n * Magic numbers\n */\nvar MAGIC = {\n  EOT_VERSION:    0x00020001,\n  EOT_MAGIC:      0x504c,\n  EOT_CHARSET:    1,\n  LANGUAGE_ENGLISH:   0x0409\n};\n\n/**\n * Utility function to convert buffer of utf16be chars to buffer of utf16le\n * chars prefixed with length and suffixed with zero\n */\nfunction strbuf(str) {\n  var b = new ByteBuffer(str.length + 4);\n\n  b.setUint16 (0, str.length, true);\n\n  for (var i = 0; i < str.length; i += 2) {\n    b.setUint16 (i + 2, str.getUint16 (i), true);\n  }\n\n  b.setUint16 (b.length - 2, 0, true);\n\n  return b;\n}\n\n// Takes TTF font on input and returns ByteBuffer with EOT font\n//\n// Params:\n//\n// - arr(Array|Uint8Array)\n//\nfunction ttf2eot(arr) {\n  var buf = new ByteBuffer(arr);\n  var out = new ByteBuffer(SIZEOF.EOT_PREFIX),\n      i, j;\n\n  out.fill(0);\n  out.setUint32(EOT_OFFSET.FONT_LENGTH, buf.length, true);\n  out.setUint32(EOT_OFFSET.VERSION, MAGIC.EOT_VERSION, true);\n  out.setUint8(EOT_OFFSET.CHARSET, MAGIC.EOT_CHARSET);\n  out.setUint16(EOT_OFFSET.MAGIC, MAGIC.EOT_MAGIC, true);\n\n  var familyName = [],\n      subfamilyName = [],\n      fullName = [],\n      versionString = [];\n\n  var haveOS2 = false,\n      haveName = false,\n      haveHead = false;\n\n  var numTables = buf.getUint16 (SFNT_OFFSET.NUMTABLES);\n\n  for (i = 0; i < numTables; ++i) {\n    var data = new ByteBuffer(buf, SIZEOF.SFNT_HEADER + i * SIZEOF.SFNT_TABLE_ENTRY);\n    var tableEntry = {\n      tag: data.toString (SFNT_OFFSET.TABLE_TAG, 4),\n      offset: data.getUint32 (SFNT_OFFSET.TABLE_OFFSET),\n      length: data.getUint32 (SFNT_OFFSET.TABLE_LENGTH)\n    };\n\n    var table = new ByteBuffer(buf, tableEntry.offset, tableEntry.length);\n\n    if (tableEntry.tag === 'OS/2') {\n      haveOS2 = true;\n\n      for (j = 0; j < 10; ++j) {\n        out.setUint8 (EOT_OFFSET.FONT_PANOSE + j, table.getUint8 (SFNT_OFFSET.OS2_FONT_PANOSE + j));\n      }\n\n      /*jshint bitwise:false */\n      out.setUint8 (EOT_OFFSET.ITALIC, table.getUint16 (SFNT_OFFSET.OS2_FS_SELECTION) & 0x01);\n      out.setUint32 (EOT_OFFSET.WEIGHT, table.getUint16 (SFNT_OFFSET.OS2_WEIGHT), true);\n\n      for (j = 0; j < 4; ++j) {\n        out.setUint32 (EOT_OFFSET.UNICODE_RANGE + j * 4, table.getUint32 (SFNT_OFFSET.OS2_UNICODE_RANGE + j * 4), true);\n      }\n\n      for (j = 0; j < 2; ++j) {\n        out.setUint32 (EOT_OFFSET.CODEPAGE_RANGE + j * 4, table.getUint32 (SFNT_OFFSET.OS2_CODEPAGE_RANGE + j * 4), true);\n      }\n\n    } else if (tableEntry.tag === 'head') {\n\n      haveHead = true;\n      out.setUint32 (EOT_OFFSET.CHECKSUM_ADJUSTMENT, table.getUint32 (SFNT_OFFSET.HEAD_CHECKSUM_ADJUSTMENT), true);\n\n    } else if (tableEntry.tag === 'name') {\n\n      haveName = true;\n\n      var nameTable = {\n        format: table.getUint16 (SFNT_OFFSET.NAMETABLE_FORMAT),\n        count: table.getUint16 (SFNT_OFFSET.NAMETABLE_COUNT),\n        stringOffset: table.getUint16 (SFNT_OFFSET.NAMETABLE_STRING_OFFSET)\n      };\n\n      for (j = 0; j < nameTable.count; ++j) {\n        var nameRecord = new ByteBuffer(table, SIZEOF.SFNT_NAMETABLE + j * SIZEOF.SFNT_NAMETABLE_ENTRY);\n        var name = {\n          platformID: nameRecord.getUint16 (SFNT_OFFSET.NAME_PLATFORM_ID),\n          encodingID: nameRecord.getUint16 (SFNT_OFFSET.NAME_ENCODING_ID),\n          languageID: nameRecord.getUint16 (SFNT_OFFSET.NAME_LANGUAGE_ID),\n          nameID: nameRecord.getUint16 (SFNT_OFFSET.NAME_NAME_ID),\n          length: nameRecord.getUint16 (SFNT_OFFSET.NAME_LENGTH),\n          offset: nameRecord.getUint16 (SFNT_OFFSET.NAME_OFFSET)\n        };\n\n        if (name.platformID === 3 && name.encodingID === 1 && name.languageID === MAGIC.LANGUAGE_ENGLISH) {\n          var s = strbuf (new ByteBuffer(table, nameTable.stringOffset + name.offset, name.length));\n\n          switch (name.nameID) {\n            case 1:\n              familyName = s;\n              break;\n            case 2:\n              subfamilyName = s;\n              break;\n            case 4:\n              fullName = s;\n              break;\n            case 5:\n              versionString = s;\n              break;\n          }\n        }\n      }\n    }\n    if (haveOS2 && haveName && haveHead) { break; }\n  }\n\n  if (!(haveOS2 && haveName && haveHead)) {\n    throw new Error ('Required section not found');\n  }\n\n  // Calculate final length\n  var len =\n   out.length +\n   familyName.length +\n   subfamilyName.length +\n   versionString.length +\n   fullName.length +\n   2 +\n   buf.length;\n\n  // Create final buffer with the the same array type as input one.\n  var eot = new ByteBuffer(len);\n\n  eot.writeBytes(out.buffer);\n  eot.writeBytes(familyName.buffer);\n  eot.writeBytes(subfamilyName.buffer);\n  eot.writeBytes(versionString.buffer);\n  eot.writeBytes(fullName.buffer);\n  eot.writeBytes([ 0, 0 ]);\n  eot.writeBytes(buf.buffer);\n\n  eot.setUint32(EOT_OFFSET.LENGTH, len, true); // Calculate overall length\n\n  return eot;\n}\n\nmodule.exports = ttf2eot;\n","/home/travis/build/npmtest/node-npmtest-ttf2eot/node_modules/ttf2eot/ttf2eot.js":"#!/usr/bin/env node\n/*\n    Author: Viktor Semykin <thesame.ml@gmail.com>\n\n    Written for fontello.com project.\n*/\n\n'use strict';\n\nvar fs = require('fs');\nvar ArgumentParser = require('argparse').ArgumentParser;\n\nvar ttf2eot = require('./index.js');\n\n\nvar parser = new ArgumentParser ({\n  version: require('./package.json').version,\n  addHelp: true,\n  description: 'TTF to EOT font converter'\n});\n\nparser.addArgument (\n  [ 'infile' ],\n  {\n    nargs: '?',\n    help: 'Input file (stdin if not defined)'\n  }\n);\n\nparser.addArgument (\n  [ 'outfile' ],\n  {\n    nargs: '?',\n    help: 'Output file (stdout if not defined)'\n  }\n);\n\n/* eslint-disable no-console */\n\nvar args = parser.parseArgs();\n\nvar input, size;\n\ntry {\n  if (args.infile) {\n    input = fs.readFileSync(args.infile);\n  } else {\n    size = fs.fstatSync(process.stdin.fd).size;\n    input = new Buffer(size);\n    fs.readSync(process.stdin.fd, input, 0, size, 0);\n  }\n} catch (e) {\n  console.error(\"Can't open input file (%s)\", args.infile || 'stdin');\n  process.exit(1);\n}\n\nvar ttf = new Uint8Array(input);\nvar eot = new Buffer(ttf2eot(ttf).buffer);\n\nif (args.outfile) {\n  fs.writeFileSync(args.outfile, eot);\n} else {\n  process.stdout.write(eot);\n}\n\n"}